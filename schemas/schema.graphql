interface Node {
  id: ID!
}

type TypeI {
  name: String
}

scalar TypeII

type TypeIII {
  name: String
}

input TypeInput {
  name: String!
}

union UnionType = TypeI | TypeIII

enum Status {
  ACTIVE
  INACTIVE
  BANNED
}

type UserConnection {
  edges: [UserEdge]
}

type UserEdge {
  node: User
  cursor: String!
}

type User implements Node {
  id: ID!
  status: Status
  type: UnionType
}

type Viewer implements Node {
  id: ID!
  me: String
  user(id: ID): User
  users(
  after: String
  first: Int
  before: String
  search: String
  status: Status
  type: TypeInput
): UserConnection
}

type Query {
  viewer: Viewer
}
